{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","key","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAGaA,G,kBAAO,SAACC,GACjB,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAI,UAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,6BACvB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCHbC,EAAS,SAACR,GAGnB,OAFAS,QAAQC,IAAIV,GAEL,yBAAKC,UAAU,aACjBD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OAAG,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,SCLzDU,G,MAAW,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAClC,OAAO,2BAAOC,KAAK,SAAShB,UAAU,SAASiB,YAAaH,EAAaI,SAAUH,MCyDxEI,E,YAvDX,aAAe,IAAD,8BAGV,+CAaJJ,aAAa,SAACK,GACV,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAZhC,EAAKC,MAAQ,CACTf,SAAS,GACTY,YAAc,IAPZ,E,iFA4BO,IAAD,OAChBI,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CAACX,SAASoB,S,+BAKvB,MAEwBC,KAAKN,MAA3Bf,EAFF,EAEEA,SAASY,EAFX,EAEWA,YACVU,EAAmBtB,EAASuB,QAAO,SAAA9B,GACtC,OAAOA,EAAQE,KAAK6B,cAAcC,SAASb,EAAYY,kBAE1D,OAGI,yBAAKlC,UAAU,OACX,gDACA,kBAAC,EAAD,CAAWc,YAAY,iBAAiBC,aAAcgB,KAAKhB,eAC3D,kBAAC,EAAD,CAAUL,SAAUsB,S,GAlDlBI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.cc0830b1.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css.css';\n\nexport const Card = (props) => {\n    return <div className='card-container'>\n        <img alt='monster'  src={`https://robohash.org/${props.monster.id}/?set=set2&size=180x180`}/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n};","import React from 'react';\nimport './card-list.styles.css.css';\nimport {Card} from '../card/card.component';\n\nexport const CardList=(props)=>{\n    console.log(props);\n    //props.children renders the tags like h1 between <CardList></CardList> where the component is used\n    return <div className='card-list'>\n        {props.monsters.map(monster=>(<Card key={monster.id} monster={monster}/>))}\n    </div>\n};","import React from 'react';\nimport './search-box.styles.css.css'\n//Props are destructured into placeHolder and handleChange\nexport const SearchBox =({placeHolder,handleChange}) => {\n    return <input type='search' className='search' placeholder={placeHolder} onChange={handleChange} />\n};","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component {\n    constructor() {\n        //Super calls the constructor method on the component class --- gives us access to this.state for the class\n        //this.state holds all state information for the class\n        super();\n\n            this.state = {\n                monsters:[],\n                searchField : '',\n            };\n\n            //NB!! This binds the this keyword in the function to point to the class context allowing us to access this.setstate --- By default this is bound to the element not the class\n            //Bind is required when non arrow functions are used. ES6 arrow functions automatically binds this\n            // this.handleChange = this.handleChange.bind(this);\n    };\n\n    //Using the arrow function we do not have to bind this\n    handleChange=(e)=>{\n        this.setState({searchField:e.target.value})\n    };\n\n\n    // NB !! when a non arrow function is used this needs to be bound in the constructor\n    // handleChange(e){\n    //     this.setState({searchField:e.target.value})\n    // };\n\n\n    //Use this to set the state when the component instance is created in the dom for the first time called right after the initial render -- this is used to update the list of monsters from an api call\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>{\n            return response.json();\n        }).then(users=>{\n            this.setState({monsters:users}) //Sets the state to the retrieved paramaeters\n\n        })\n    }\n\n    render() {\n        //NB everytime this.setState is called the render method is called to update the page\n        const {monsters,searchField}=this.state; //Destructoring is the same as saying const monsters = this.state.monsters and const searchField = this.state.searchfield\n        const filteredMonsters = monsters.filter(monster=>{\n           return monster.name.toLowerCase().includes(searchField.toLowerCase()) // If condition true flter adds monster to the filtered list\n        });\n        return (\n            //Pass the monsters array as a prop for the component\n            //Note this.setstate is an async function that *can take a callback aka after setting state do blah\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n                <SearchBox placeHolder='Search Monster' handleChange={this.handleChange}/>\n                <CardList monsters={filteredMonsters} />\n        </div>\n        );\n    }\n}\n\nexport default App;\n\n// {/*<input type='search' placeholder='Search Monsters' onChange={e=>{this.setState({searchField:e.target.value}); //This event causes rener to be called again , resulting in the filteredMonsters array being updated*/}\n// {/*    // this.setState({searchField:e.target.value},()=> console.log(this.state.searchField));*/}\n// {/*}}/>*/}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}